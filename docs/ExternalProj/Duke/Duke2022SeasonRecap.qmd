---
title: "Analysis of Duke Field Hockey's 2022 Season"
author: "Chase Mathis"
format: 
  html:
    toc: true
    theme: cosmo
execute: 
  echo: false
  warning: false
editor: visual
---

## Overview

Thanks to the vast amounts of data collected over the course of the season, the analytics team was able to combine the data and extract aggregate trends. In total, there are over 37504 recorded plays.

```{r}
#| label: load-libraries-data
#| warning: false

library(tidyverse)
library(knitr)

ggplot2::theme_set(ggplot2::theme_minimal(base_size = 14))

Duke2022<- list.files("DukeData/GameData/")

new_duke_games <- c()

for (i in 1:length(Duke2022)){
  new_duke_games[i] = paste("DukeData/GameData/", Duke2022[i], sep = '')
}

df <- map(new_duke_games, read_csv) |>  
  bind_rows()
```

```{r}
#| label: cleaning-data

df <- df |>  
  arrange(Timeline, `Start time`) |>  # show df chronologically by game
  select(where(~sum(!is.na(.x)) > 0)) # gets rid of columns with only na values

## dealing with Ungrouped column. Making home and away score column
df <- df |> 
mutate(homescore = str_extract(Ungrouped,"-([^-]*),")) |> 
  mutate(homescore = str_extract(homescore, "^([^,])+")) |>
  mutate(homescore = as_factor(str_extract(homescore, "\\d"))) |> 
  fill(homescore) |>  # fill away score
  mutate(awayscore = str_extract(Ungrouped, ",([^-]*)-")) |> 
  mutate(awayscore = str_extract(awayscore, "[^,]*$")) |> 
  mutate(awayscore = as_factor(str_extract(awayscore, "\\d"))) |> 
  fill(awayscore) |>  #fill homescore
  separate(Row, c("Other", "Opponent"), remove = FALSE) # add opponent column
```

## Circle Entry

Circle entry is an integral part of winning a Field Hockey game. Where does Duke enter the circle?

::: panel-tabset
## Graph

```{r}
circle_entry_Duke <- df |>  
  filter(grepl('CE DUKE', `Outcome +`)) |> 
  filter(grepl('CE', Row)) |> 
  select(`Circle Entry`) |>  
  filter(!grepl(',',`Circle Entry`)) |>  
  drop_na()

circle_entry_Duke |> 
  ggplot(aes(x = `Circle Entry`)) + 
  geom_bar() + 
  labs(
    x = 'Circle Entry',
    y = 'Count',
    title = 'Where does Duke Enter the Circle?'
  )
```

## Table

```{r}
circle_entry_Duke |>  
  group_by(`Circle Entry`) |>  
  summarise(count = n()) |>  
  arrange(desc(count)) |>  
  kable(caption = 'Where Does Duke Enter the Circle?', col.names = c('Location', 'Frequency'))
```
:::

What about our opponents?

::: panel-tabset
## Graph

```{r}
circle_entry_Other <- df |>  
  filter(grepl('CE', Row)) |> 
  filter(!grepl('DUKE',Row)) |> 
  select(`Circle Entry`) |>  
  filter(!grepl(',',`Circle Entry`)) |>  
  drop_na()

circle_entry_Other |> 
  ggplot(aes(x = `Circle Entry`)) + 
  geom_bar() + 
  labs(
    x = 'Circle Entry',
    y = 'Count',
    title = 'Where does Duke Opponents Enter the Circle?'
  )

```

## Table

```{r}
circle_entry_Other |>  
  group_by(`Circle Entry`) |>  
  summarise(count = n()) |>  
  arrange(desc(count)) |>  
  kable(caption = 'Where Does Duke Opponents Enter the Circle?', col.names = c('Location', 'Frequency'))
```
:::

```{r}

prop_Left_Duke <- circle_entry_Duke |> 
  group_by(`Circle Entry`) |>  
  summarise(count = n()) |> 
  mutate(prop = count/sum(count)) |> 
  filter(`Circle Entry` == "Left") |> 
  pull(prop)

prop_Left_Other <- circle_entry_Other |> 
  group_by(`Circle Entry`) |>  
  summarise(count = n()) |> 
  mutate(prop = count/sum(count)) |> 
  filter(`Circle Entry` == "Left") |> 
  pull(prop)
```

The distribution is rather similar to Duke's own distribution. However, opponents do a **better** job forcing us to the left. Duke is forced to the left `r round(prop_Left_Duke*100,2)` percent of the time, while opponents are forced to the left `r round(prop_Left_Other * 100,2)` percent of the time. On a better note, Duke entered the circle `r nrow(circle_entry_Duke) - nrow(circle_entry_Other)` more times than their opponents across the season.

### Which Teams Beat Duke in Circle Entries?

```{r}
# times when duke lost circle entry battle

circle_entry_stats <- df |> 
  filter(grepl("CE", Row)) |> 
  group_by(Timeline, Opponent) |> 
  summarise(n = n()) |> 
  rename("Match" = Timeline, "Team" = Opponent) |> 
  arrange(Match, desc(n)) |> 
  mutate(difference = lag(n) - n,
         Win = if_else(row_number() == 1, "Won", "Lost")) |> 
  ungroup() |> 
  count(Team, Win) 


  circle_entry_stats |> 
  filter(grepl("Won", Win)) |> 
  filter(!grepl("DUKE", Team)) |> 
  select(Team) |> 
  pivot_wider(names_from = Team,values_from = Team) |> 
  kable(col.names = NULL, caption = "Teams that Beat Duke in Circle Entry")
  
  x <- circle_entry_stats |> 
    filter(grepl("DUKE", Team)) |> 
    group_by(Win) |> 
    arrange(desc(n)) |> 
    mutate(percent = lag(Win)) |> pull(n)
  
```

Duke beat opponents in circle entries `r x[1]` out of `r x[1] + x[2]` total games.

## Outcomes

### Circle Entry Outcomes

```{r}
CEOutcomes <- df |> 
  filter(grepl('CE DUKE', `Outcome +`)) |> 
  filter(grepl('CE', Row))  |> 
  filter(!grepl(',',`Circle Entry`)) |>  # strange double direction
  select(`Circle Entry`, `Outcome +`, `Outcome -`, `Outcome Neutral`) |> 
  mutate(Shot = if_else(grepl("Shot", `Outcome +`), 1, 0),
         Goal = if_else(grepl("Goal", `Outcome +`), 1, 0),
         Chance = if_else(grepl("Chance", `Outcome +`), 1, 0),
         PCWin = if_else(grepl("PC Win", `Outcome +`), 1, 0),
         Turnover = if_else(grepl("Turnover", `Outcome -`), 1, 0),
         FoulAgainst = if_else(grepl("Foul Against", `Outcome -`), 1, 0),
         ACE0 = if_else(grepl("ACE-0", `Outcome -`), 1, 0),
         Interception = if_else(grepl("Interception", `Outcome -`), 1, 0),
         EndLine = if_else(grepl("End Line", `Outcome -`), 1, 0),
         DuelLost = if_else(grepl("Duel Lost", `Outcome -`), 1, 0),
         BallOut = if_else(grepl("Ball Out", `Outcome -`), 1, 0),
         FreeHit = if_else(grepl("Free Hit", `Outcome Neutral`), 1, 0),
         LongCorner = if_else(grepl("Long Corner", `Outcome Neutral`), 1, 0),
         SideLine = if_else(grepl("Sideline", `Outcome Neutral`), 1, 0)) |> 
  select(-contains("Outcome")) |> 
  drop_na()
```

```{r}
get_Loc_Prob <- function(location) {
  circle_entry_Duke |>  
  group_by(`Circle Entry`) |>  
  summarise(count = n()) |> 
  mutate(probLocation = count/sum(count)) |> 
  filter(`Circle Entry` == location) |> 
    pull(probLocation)
}

```

You can interpret the following numbers as: "The probability we do **x** given we entered the circle from said location". For instance for the first example you can say: Given we entered the circle from the middle, we shot the ball 45% of the time.

::: panel-tabset
## Shots

```{r}
CEOutcomes |> 
  group_by(`Circle Entry`, Shot) |> 
  summarise(count = n()) |> 
  mutate(loc = get_Loc_Prob(`Circle Entry`)) |> 
  ungroup() |> 
  mutate(and = count/sum(count),
         conditional = 100 * (and/loc)) |> 
  select(`Circle Entry`, Shot, conditional) |> 
  filter(Shot == 1) |> 
  select(-Shot) |> 
  arrange(desc(conditional)) |> 
  kable(col.names = c("Location", "Shooting Prob."), caption = "How Often We Shoot When Entering The Circle", digits = 2)
```

## Turnovers

```{r}

CEOutcomes |> 
  group_by(`Circle Entry`, Turnover) |> 
  summarise(count = n()) |> 
  mutate(loc = get_Loc_Prob(`Circle Entry`)) |> 
  ungroup() |> 
  mutate(and = count/sum(count),
         conditional = 100 * (and/loc)) |> 
  select(`Circle Entry`, Turnover, conditional) |> 
  filter(Turnover == 1) |> 
  select(-Turnover) |> 
  arrange(desc(conditional)) |> 
  kable(col.names = c("Location", "Turnover Prob."), caption = "How Often We Turnover the Ball When Entering The Circle", digits = 2)
```

## Fouls

```{r}
CEOutcomes |> 
  group_by(`Circle Entry`, FoulAgainst) |> 
  summarise(count = n()) |> 
  mutate(loc = get_Loc_Prob(`Circle Entry`)) |> 
  ungroup() |> 
  mutate(and = count/sum(count),
         conditional = 100 * (and/loc)) |> 
  select(`Circle Entry`, FoulAgainst, conditional) |> 
  filter(FoulAgainst == 1) |> 
  select(-FoulAgainst) |> 
  arrange(desc(conditional)) |> 
  kable(col.names = c("Location", "Foul Prob."), caption = "How Often We Get Fouled When Entering The Circle", digits = 2)
```

## ACE-0

```{r}
CEOutcomes |> 
  group_by(`Circle Entry`, ACE0) |> 
  summarise(count = n()) |> 
  mutate(loc = get_Loc_Prob(`Circle Entry`)) |> 
  ungroup() |> 
  mutate(and = count/sum(count),
         conditional = 100 * (and/loc)) |> 
  select(`Circle Entry`, ACE0, conditional) |> 
  filter(ACE0 == 1) |> 
  select(-ACE0) |> 
  arrange(desc(conditional)) |> 
  kable(col.names = c("Location", "ACE-0 Prob."), caption = "How Often We Have an ACE-0 When Entering The Circle", digits = 2)
```

## Goals

```{r}
CEOutcomes |> 
  group_by(`Circle Entry`, Goal) |> 
  summarise(count = n()) |> 
  mutate(loc = get_Loc_Prob(`Circle Entry`)) |> 
  ungroup() |> 
  mutate(and = count/sum(count),
         conditional = 100 * (and/loc)) |> 
  select(`Circle Entry`, Goal, conditional) |> 
  filter(Goal == 1) |> 
  select(-Goal) |> 
  arrange(desc(conditional)) |> 
  kable(col.names = c("Location", "Goal Prob."), caption = "How Often We Score When Entering The Circle", digits = 2)
```
:::

## Turnovers

The following table represents what type of turnover we commit when entering the circle.

```{r}
df |> 
  filter(grepl("CE DUKE" , Row)) |> 
  filter(grepl("Turnover", `Outcome -`)) |> 
  separate(`Outcome -`, c("a","b","c"), ",") |> 
  select(a,b,c) |> 
  mutate(Type = case_when(
    !grepl("ACE", a) & !grepl("Turnover", a) ~ a,
    !grepl("ACE", b) & !grepl("Turnover", b) ~ b,
    !grepl("ACE", c) & !grepl("Turnover", c) ~ c
  )) |> 
  mutate(Type = if_else(substr(Type, 1, 1) == " ", substr(Type,2,100), Type)) |> 
  group_by(Type) |> 
  summarise(n = n()) |> 
  arrange(desc(n)) |> 
  kable(col.names = c("Type of Turnover", "Count"))

```

## Ball Start/Ball Win

The following table represents at which zone we get a Direct Ball Win. Naturally, we win the ball the most in the defensive zones while the least in the attacking zones.

```{r}
df |> 
  select(`BS Outcome - Direct Ball Win DUKE`) |> 
  drop_na() |> 
  separate(`BS Outcome - Direct Ball Win DUKE`, c("a","b","c")) |> 
  mutate(location = case_when(
    !grepl("DUKE",b) ~ b,
    !grepl("DUKE",c) ~ c
  )) |> 
  group_by(location) |> 
  summarise(n = n()) |> 
  drop_na() |> 
  arrange(desc(n)) |> 
  kable(col.names = c("Location of Direct Ball Win", "Frequency"))
```

## Offensive Goals

```{r}
df |> 
  filter(grepl("Goal",Row) & grepl("DUKE", Row)) |> 
  count(`Goal Type`) |> 
  drop_na() |> 
  kable(col.names = c("Goal Type", "Frequency"), caption = c("How does Duke Score?"))
```

```{r}
df |> 
    filter(grepl("Goal", `Outcome +`) & grepl("DUKE", `Outcome +`)) |> 
    filter(`Goal Type` == "ACE" & grepl("BS", Row) | grepl("BW", Row)) |> 
  group_by(Other) |> 
  summarise(count = n()) |> 
  ungroup() |> 
  arrange(desc(count)) |> 
  kable(col.names = c("Ball Start/Win Position", "Frequency"), caption = c("What Leads to a Duke Goal?"))
```

## Defensive Goals

This table shows the count of ACE goals vs. goals from Penalty Corners.

```{r}
df |> 
  filter(grepl("Goal",Row) & !grepl("DUKE", Row)) |> 
  count(`Goal Type`) |> 
  kable(col.names = c("Goal Type", "Frequency"), caption = c("How do Opponents Score?"))
```
